{"version":3,"file":"static/js/4.15c24145.chunk.js","mappings":"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","sources":["../../core/src/instance/RepoFilterButton.tsx","../../core/src/overview/OverviewTabs.tsx","../../core/src/instance/InstanceBackfills.tsx","../../core/src/instance/backfill/BackfillPage.tsx","../../core/src/overview/OverviewJobsTable.tsx","../../core/src/overview/sortRepoBuckets.tsx","../../core/src/overview/visibleRepoKeys.tsx","../../core/src/overview/OverviewJobsRoot.tsx","../../core/src/overview/OverviewResourcesTable.tsx","../../core/src/overview/OverviewResourcesRoot.tsx","../../core/src/instigation/Unloadable.tsx","../../core/src/overview/OverviewSchedulesTable.tsx","../../core/src/overview/OverviewSchedulesRoot.tsx","../../core/src/overview/OverviewSensorsTable.tsx","../../core/src/overview/OverviewSensorsRoot.tsx","../../core/src/instance/NextTick.tsx","../../core/src/runs/useRunsForTimeline.tsx","../../core/src/overview/OverviewTimelineRoot.tsx","../../core/src/runs/useHourWindow.tsx","../../core/src/overview/OverviewRoot.tsx","../../core/src/ui/formatters.tsx"],"sourcesContent":["import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton: React.FC = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n  const {flagSidebarResources} = useFeatureFlags();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"timeline\" title=\"Timeline\" to=\"/overview/timeline\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        {flagSidebarResources && (\n          <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        )}\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\n\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './BackfillTable';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {},\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.backfillId\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({partitionBackfillsOrError}) => {\n          if (partitionBackfillsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={partitionBackfillsOrError} />;\n          }\n\n          if (!partitionBackfillsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"no-results\"\n                  title=\"No backfills found\"\n                  description={<p>This instance does not have any backfill jobs.</p>}\n                />\n              </Box>\n            );\n          }\n\n          const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n          const backfillHealths = daemonHealths\n            .filter((daemon) => daemon.daemonType === 'BACKFILL')\n            .map((daemon) => daemon.required && daemon.healthy);\n          const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n          return (\n            <div>\n              {isBackfillHealthy ? null : (\n                <Box padding={{horizontal: 24, vertical: 16}}>\n                  <DaemonNotRunningAlertBody />\n                </Box>\n              )}\n              <BackfillTable\n                backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n                refetch={queryResult.refetch}\n              />\n              {partitionBackfillsOrError.results.length > 0 ? (\n                <div style={{marginTop: '16px'}}>\n                  <CursorPaginationControls {...paginationProps} />\n                </div>\n              ) : null}\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($cursor: String, $limit: Int) {\n    partitionBackfillsOrError(cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          backfillId\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Page,\n  PageHeader,\n  Colors,\n  Box,\n  Tag,\n  Table,\n  Spinner,\n  Dialog,\n  Button,\n  DialogFooter,\n  ButtonLink,\n  DialogBody,\n} from '@dagster-io/ui';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\nimport {numberFormatter} from '../../ui/formatters';\n\nimport {\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n  PartitionBackfillFragment,\n} from './types/BackfillPage.types';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {\n      variables: {backfillId},\n    },\n  );\n  const {data} = queryResult;\n\n  const backfill = data?.partitionBackfillOrError;\n  let isInProgress = true;\n  if (backfill && backfill.__typename === 'PartitionBackfill') {\n    // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n    isInProgress = backfill.status === BulkActionStatus.REQUESTED;\n  }\n  useQueryRefreshAtInterval(queryResult, 5000, isInProgress);\n\n  function content() {\n    if (!backfill || !data) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (backfill.__typename === 'PythonError') {\n      return <PythonErrorInfo error={backfill} />;\n    }\n\n    function getRunsUrl(status: 'requested' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'requested':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n        >\n          <Detail label=\"Created\" detail=\"Mar 22, 5:00 PM\" />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition Selection\"\n            detail={\n              <PartitionSelection\n                numPartitions={backfill.numPartitions || 0}\n                rootAssetTargetedPartitions={\n                  backfill.assetBackfillData?.rootAssetTargetedPartitions\n                }\n                rootAssetTargetedRanges={backfill.assetBackfillData?.rootAssetTargetedRanges}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<StatusLabel status={backfill.status} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>Partitions targeted</th>\n              <th>Requested</th>\n              <th>Complete</th>\n              <th>Failed</th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetPartitionsStatusCounts.map((asset) => (\n              <tr key={asset.assetKey.path.join('/')}>\n                <td>\n                  <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                    <div>{asset.assetKey.path.join('/')}</div>\n                    <div>\n                      <StatusBar\n                        targeted={asset.numPartitionsTargeted}\n                        requested={asset.numPartitionsRequested}\n                        completed={asset.numPartitionsCompleted}\n                        failed={asset.numPartitionsFailed}\n                      />\n                    </div>\n                  </Box>\n                </td>\n                <td>\n                  <a href={getRunsUrl('targeted')}>{asset.numPartitionsTargeted}</a>\n                </td>\n                <td>\n                  <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                    <div>{asset.numPartitionsRequested}</div>\n                    <div>\n                      {asset.numPartitionsRequested ? (\n                        <a href={getRunsUrl('requested')}>View Runs</a>\n                      ) : null}\n                    </div>\n                  </Box>\n                </td>\n                <td>\n                  <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                    <div>{asset.numPartitionsCompleted}</div>\n                    <div>\n                      {asset.numPartitionsCompleted ? (\n                        <a href={getRunsUrl('complete')}>View Runs</a>\n                      ) : null}\n                    </div>\n                  </Box>\n                </td>\n                <td>\n                  <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                    <div>{asset.numPartitionsFailed}</div>\n                    <div>\n                      {asset.numPartitionsFailed ? (\n                        <a href={getRunsUrl('failed')}>View Runs</a>\n                      ) : null}\n                    </div>\n                  </Box>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <div style={{fontSize: '18px'}}>\n            <Link to=\"/overview/backfills\" style={{color: Colors.Gray700}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </div>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nconst StatusLabel = ({status}: {status: BulkActionStatus}) => {\n  switch (status) {\n    case BulkActionStatus.CANCELED:\n      return <Tag intent=\"warning\">Canceled</Tag>;\n    case BulkActionStatus.COMPLETED:\n      return <Tag intent=\"success\">Complete</Tag>;\n    case BulkActionStatus.FAILED:\n      return <Tag intent=\"danger\">Failed</Tag>;\n    case BulkActionStatus.REQUESTED:\n      return (\n        <Tag intent=\"primary\" icon=\"spinner\">\n          In Progress\n        </Tag>\n      );\n    default:\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n  }\n};\n\nfunction StatusBar({\n  targeted,\n  requested,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  requested: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.Gray100,\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * requested) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.Green500}} />\n      <div style={{background: Colors.Red500}} />\n      <div style={{background: Colors.Blue200}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.Gray700};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = React.useReducer((s: number, _: any) => s + 1, 0);\n  React.useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  const str = dayjs.duration(duration).humanize(false);\n  return <span>{str}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    assetBackfillData {\n      rootAssetTargetedRanges {\n        start\n        end\n      }\n      rootAssetTargetedPartitions\n      assetPartitionsStatusCounts {\n        assetKey {\n          path\n        }\n        numPartitionsTargeted\n        numPartitionsRequested\n        numPartitionsCompleted\n        numPartitionsFailed\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\ntype AssetBackfillData = Extract<\n  PartitionBackfillFragment['assetBackfillData'],\n  {__typename: 'AssetBackfillData'}\n>;\n\nexport const PartitionSelection = ({\n  numPartitions,\n  rootAssetTargetedRanges,\n  rootAssetTargetedPartitions,\n}: {\n  numPartitions: number;\n  rootAssetTargetedRanges?: AssetBackfillData['rootAssetTargetedRanges'];\n  rootAssetTargetedPartitions?: AssetBackfillData['rootAssetTargetedPartitions'];\n}) => {\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  let dialogContent: JSX.Element | undefined;\n  let content: JSX.Element | undefined;\n  if (rootAssetTargetedPartitions) {\n    if (rootAssetTargetedPartitions.length > 3) {\n      dialogContent = (\n        <div>\n          {rootAssetTargetedPartitions.map((p) => (\n            <div key={p}>{p}</div>\n          ))}\n        </div>\n      );\n      content = (\n        <ButtonLink\n          onClick={() => {\n            setIsDialogOpen(true);\n          }}\n        >\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n      );\n    } else {\n      content = (\n        <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n          {rootAssetTargetedPartitions.map((p) => (\n            <div key={p}>{p}</div>\n          ))}\n        </Box>\n      );\n    }\n  } else {\n    if (rootAssetTargetedRanges?.length === 1) {\n      const {start, end} = rootAssetTargetedRanges[0];\n      content = (\n        <div>\n          {start} - {end}\n        </div>\n      );\n    } else {\n      content = (\n        <ButtonLink\n          onClick={() => {\n            setIsDialogOpen(true);\n          }}\n        >\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n      );\n      dialogContent = (\n        <Box flex={{direction: 'column', gap: 8}}>\n          {rootAssetTargetedRanges?.map((r) => (\n            <div key={`${r.start}:${r.end}`}>\n              {r.start} - {r.end}\n            </div>\n          ))}\n        </Box>\n      );\n    }\n  }\n\n  return (\n    <>\n      <div>{content}</div>\n      <Dialog isOpen={!!dialogContent && isDialogOpen} title=\"Partition selection\">\n        <DialogBody>{dialogContent}</DialogBody>\n        <DialogFooter topBorder>\n          <Button onClick={() => setIsDialogOpen(false)}>Close</Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, NonIdealState, PageHeader, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, NonIdealState, PageHeader, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport {Alert, Box, Checkbox, Colors, Group, Table, Subheading, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {TickTag} from './InstigationTick';\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors: React.FC<{\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({sensorStates, showSubheading = true}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor name</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules: React.FC<{\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({scheduleStates, showSubheading = true}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n            <th>Partition set status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks, hasStopPermission} = sensorState;\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !hasStopPermission;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow: React.FC<{\n  scheduleState: InstigationStateFragment;\n}> = ({scheduleState}) => {\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !scheduleState.hasStopPermission;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n        ) : null}\n      </td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; name: string};\n\nexport const OverviewScheduleTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((name) => {\n          flat.push({type: 'schedule', repoAddress, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.scheduleCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter((name) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No schedules were found in the selected code locations'\n                : 'No schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewScheduleTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 0 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by schedule name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name}) => name);\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; name: string};\n\nexport const OverviewSensorTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((name) => {\n          flat.push({type: 'sensor', repoAddress, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.sensorCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n  UnloadableSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter((name) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewSensorTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 0 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by sensor name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSensorsQuery, UnloadableSensorsQueryVariables>(\n    UNLOADABLE_SENSORS_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: string[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const sensorNames = sensors.map(({name}) => name);\n\n      if (sensorNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors: sensorNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob, __ASSET_JOB_PREFIX} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(({jobType}) => jobType === 'asset');\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce((accum, job) => {\n      const startTimes = job.runs.map((job) => job.startTime);\n      return {...accum, [job.key]: Math.min(...startTimes)};\n    }, {} as {[jobKey: string]: number});\n\n    return jobs.sort((a, b) => earliest[a.key] - earliest[b.key]);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {\n  PageHeader,\n  Heading,\n  Box,\n  TextInput,\n  Button,\n  ButtonGroup,\n  ErrorBoundary,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {OverviewTabs} from './OverviewTabs';\n\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\nexport const OverviewTimelineRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(() => jobs.filter(({key}) => visibleJobKeys.has(key)), [\n    jobs,\n    visibleJobKeys,\n  ]);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"timeline\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagit.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(() => [hourWindow, setHourWindowWithDefault], [\n    hourWindow,\n    setHourWindowWithDefault,\n  ]);\n};\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/timeline\">\n        <OverviewTimelineRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/timeline\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n","const compactFormatter = new Intl.NumberFormat(navigator.language, {\n  compactDisplay: 'short',\n  notation: 'compact',\n});\n\nexport const numberFormatter = new Intl.NumberFormat(navigator.language, {});\n\nexport const compactNumber = (num: number | bigint): string => compactFormatter.format(num);\n"],"names":["RepoFilterButton","React","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","icon","label","options","onBrowse","onToggle","selected","padding","top","intent","onClick","name","rightIcon","length","OverviewTabs","props","refreshState","tab","flagSidebarResources","useFeatureFlags","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","TabLink","id","title","to","bottom","QueryRefresh","InstanceBackfills","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","useCursorPaginatedQuery","query","BACKFILLS_QUERY","variables","pageSize","nextCursorForResult","result","partitionBackfillsOrError","__typename","results","PAGE_SIZE","backfillId","undefined","getResultArray","queryResult","paginationProps","useQueryRefreshAtInterval","FIFTEEN_SECONDS","Page","PageHeader","tabs","Loading","allowStaleData","PythonErrorInfo","error","vertical","NonIdealState","description","backfillHealths","data","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","map","required","healthy","isBackfillHealthy","every","x","horizontal","BackfillTable","backfills","slice","refetch","marginTop","gql","INSTANCE_HEALTH_FRAGMENT","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","status","BulkActionStatus","fontSize","color","Colors","testId","Spinner","purpose","getRunsUrl","filters","token","value","push","RunStatus","runsPathWithFilters","wrap","Detail","detail","Duration","start","timestamp","end","endTimestamp","PartitionSelection","numPartitions","rootAssetTargetedPartitions","assetBackfillData","rootAssetTargetedRanges","StatusLabel","Table","assetPartitionsStatusCounts","asset","assetKey","path","join","StatusBar","targeted","numPartitionsTargeted","requested","numPartitionsRequested","completed","numPartitionsCompleted","failed","numPartitionsFailed","href","content","gap","minWidth","Label","Tag","borderRadius","backgroundColor","display","gridTemplateColumns","gridTemplateRows","height","overflow","background","styled","s","_","rerender","intervalId","setInterval","clearInterval","Date","now","str","humanize","dialogContent","isDialogOpen","setIsDialogOpen","p","ButtonLink","numberFormatter","r","Dialog","topBorder","Button","OverviewJobsTable","repos","parentRef","allKeys","repoAddress","repoAddressAsHumanString","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","flat","forEach","jobs","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","ref","$totalHeight","index","key","size","expanded","showLocation","has","rightElement","Tooltip","placement","VirtualizedJobRow","sortRepoBuckets","buckets","sort","a","b","aString","bString","localeCompare","visibleRepoKeys","Set","option","buildRepoAddress","repository","repositoryLocation","OverviewJobsRoot","useQueryPersistedState","queryKey","defaults","search","searchValue","setSearchValue","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","loading","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","grow","TextInput","onChange","e","target","placeholder","paddingTop","anyReposHidden","workspaceOrError","entries","locationEntries","entry","locationOrLoadError","repositories","repo","pipelines","isHiddenAssetGroupJob","pipeline","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","UnloadableSensors","sensorStates","showSubheading","UnloadableSensorInfo","maxWidth","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","scheduleState","ScheduleStateRow","Alert","selectorId","ticks","hasStopPermission","useMutation","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","toggleOffInFlight","confirm","useConfirmation","onChangeSwitch","InstigationStatus","jobOriginId","jobSelectorId","lacksPermission","latestTick","element","Checkbox","format","disabled","checked","DEFAULT_DISABLED_REASON","checkbox","Group","spacing","instigatorState","tick","instigationType","InstigationType","instigationState","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","position","whiteSpace","humanCronString","OverviewScheduleTable","schedules","scheduleCount","VirtualizedScheduleRow","OverviewSchedulesRoot","OVERVIEW_SCHEDULES_QUERY","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","SchedulerInfo","border","side","setIsOpen","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","scheduleNames","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","sensorNames","SCHEDULE_FUTURE_TICKS_FRAGMENT","makeJobKey","jobName","RUN_TIMELINE_QUERY","RUN_TIME_FRAGMENT","ONE_HOUR","hourWindowToOffset","hourWindow","OverviewTimelineRoot","defaultValue","validate","useStateWithStorage","setHourWindow","setHourWindowWithDefault","useHourWindow","setNow","offsetMsec","setOffsetMsec","timer","onPageEarlier","onPageLater","onPageNow","range","Number","LOOKAHEAD_HOURS","runsFilter","startSec","endSec","inProgressFilter","statuses","createdBefore","terminatedFilter","Array","from","doneStatuses","updatedAfter","tickCursor","ticksUntil","previousData","initialLoading","unterminated","terminated","runsByJobKey","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","repositoryName","location","repositoryLocationName","pipelineName","jobsWithRuns","locationEntry","schedule","jobTicks","futureTicks","isAdHoc","jobKey","jobRuns","jobsAndTicksToAdd","adHocJobs","find","jobType","runs","workspacePipelinePath","repoName","repoLocation","earliest","reduce","accum","job","startTimes","Math","min","useRunsForTimeline","visibleJobKeys","searchLower","flatMap","visibleJobs","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","RunTimeline","OverviewRoot","exact","render","compactFormatter","Intl","NumberFormat","navigator","language","compactDisplay","notation","compactNumber","num"],"sourceRoot":""}